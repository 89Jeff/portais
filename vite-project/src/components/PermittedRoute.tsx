// src/components/PermittedRoute.tsx

import React from 'react';
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

// Supondo que cada permissÃ£o seja uma string, ex: "PED", "CKL"
interface PermittedRouteProps {
Â  requiredPermission: string;
}

const PermittedRoute: React.FC<PermittedRouteProps> = ({ requiredPermission }) => {
Â  const { user, isAuthenticated, isLoading } = useAuth(); // AGORA FUNCIONA GRAÃ‡AS AO CONTEXTO

Â  // Enquanto carrega o estado de autenticaÃ§Ã£o
Â  if (isLoading) return <div style={{ padding: '2rem', textAlign: 'center' }}><p>Carregando permissÃµes...</p></div>;

Â  // UsuÃ¡rio nÃ£o autenticado
Â  if (!isAuthenticated) return <Navigate to="/" replace />;

Â  // UsuÃ¡rio sem permissÃ£o
Â  // O 'user' agora pode ser nulo se isAuthenticated for falso (checado acima), 
Â  // mas para garantir a tipagem, verificamos user?.direitos
Â  if (!user || !user.direitos.includes(requiredPermission)) {
Â  Â  return (
Â  Â  Â  <div style={{ padding: '2rem', textAlign: 'center' }}>
Â  Â  Â  Â  <h2>ğŸ”’ Acesso negado</h2>
Â  Â  Â  Â  <p>VocÃª nÃ£o tem permissÃ£o para acessar esta pÃ¡gina.</p>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  // UsuÃ¡rio autenticado e com permissÃ£o
Â  return <Outlet />;
};

export default PermittedRoute;